{{- define "vault.validateValues" -}}
{{- if and .Values.persistence.enabled (empty .Values.persistence.size) }}
{{- fail "ERROR: If persistence is enabled, you must specify persistence.size" }}
{{- end }}
{{- end -}}
{{- /* Call the validation template */}}
{{- template "vault.validateValues" . }}

Your HashiCorp Vault chart has been deployed.
Vault is currently INITIALIZED but SEALED.

To initialize and unseal Vault (if replicaCount is 1):

1.  **Find your Vault pod name:**
    export VAULT_POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "vault-secrets.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
    echo "Vault Pod: ${VAULT_POD_NAME}"

2.  **Initialize Vault (only ONCE per Vault cluster):**
    kubectl exec --namespace {{ .Release.Namespace }} -it ${VAULT_POD_NAME} -- vault operator init -key-shares=1 -key-threshold=1

    **IMPORTANT: Securely store the Unseal Key and Initial Root Token displayed!**
    You will NOT be able to recover them if lost.

3.  **Unseal Vault:**
    Use the Unseal Key from the previous step:
    kubectl exec --namespace {{ .Release.Namespace }} -it ${VAULT_POD_NAME} -- vault operator unseal <YOUR_UNSEAL_KEY>

4.  **Check Vault status:**
    kubectl exec --namespace {{ .Release.Namespace }} -it ${VAULT_POD_NAME} -- vault status
    It should show `Sealed: false` and `Initialized: true`.

5.  **Accessing Vault UI:**
    {{- if .Values.uiService.enabled }}
    {{- if eq .Values.uiService.type "NodePort" }}
    Get the NodePort:
      export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "vault-secrets.fullname" . }}-ui)
      export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
      echo "Vault UI accessible at: http://$NODE_IP:$NODE_PORT"
    {{- else if eq .Values.uiService.type "LoadBalancer" }}
    Get the LoadBalancer IP/Hostname:
      kubectl get --namespace {{ .Release.Namespace }} service {{ include "vault-secrets.fullname" . }}-ui --watch
      (Wait for EXTERNAL-IP to be assigned)
      echo "Vault UI will be accessible at the EXTERNAL-IP on port {{ .Values.uiService.port }}"
    {{- else }}
    The UI service is of type {{ .Values.uiService.type }}. You might need to set up port-forwarding:
      kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "vault-secrets.fullname" . }}-ui 8200:8200
      Then access via http://localhost:8200
    {{- end }}
    You can login with the Initial Root Token.
    {{- else }}
    UI service is disabled. To access Vault, you can port-forward the main service:
      kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "vault-secrets.fullname" . }} 8200:8200
    Then access via http://localhost:8200 using the API or CLI.
    The CLI needs VAULT_ADDR=http://localhost:8200
    {{- end }}

**For HA setups (replicaCount > 1):**
- Initialization (`vault operator init`) is done on ONE pod (e.g., `<release>-vault-0`).
- Unsealing needs to be done on EACH pod if not using auto-unseal.
- Raft peers should join automatically. Check logs if they don't.

**Production Considerations:**
- **ENABLE TLS!** The current setup has `tls_disable = "true"`.
- Configure auto-unseal (e.g., using Kubernetes secrets, GCP KMS, AWS KMS, Azure Key Vault).
- Set up audit devices.
- Configure appropriate authentication methods and policies.
- Regularly back up Vault data (especially the Raft backend).
- Review resource requests/limits.
