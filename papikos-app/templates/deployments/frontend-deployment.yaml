{{- $top := . -}}
{{- $frontendValues := .Values.frontend -}}
{{- range $color := list "blue" "green" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "papikos-app.fullname" $top }}-frontend-{{ $color }}
  labels:
    {{- include "papikos-app.labels" $top | nindent 4 }}
    app.kubernetes.io/component: frontend
    version: {{ $color }}
spec:
  # For green-blue, you might want to control replicas based on activeColor
  # For simplicity, this uses the replicaCount for both.
  # A more advanced setup might use 0 or 1 for inactive and scale active.
  replicas: {{ $frontendValues.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "papikos-app.selectorLabels" $top | nindent 6 }}
      app.kubernetes.io/component: frontend
      version: {{ $color }}
  template:
    metadata:
      annotations: {} # Add any specific annotations you need here
        # Example:
        # projectcontour.io/upstream-protocol.tls: "http,443"
      labels:
        {{- include "papikos-app.selectorLabels" $top | nindent 8 }}
        app.kubernetes.io/component: frontend
        version: {{ $color }}
    spec:
      {{- with $top.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "papikos-app.serviceAccountName" $top }}
      securityContext:
        {{- toYaml $frontendValues.podSecurityContext | default $top.Values.global.podSecurityContext | nindent 8 }}
      containers:
        - name: frontend
          securityContext:
            {{- toYaml $frontendValues.securityContext | default $top.Values.global.securityContext | nindent 12 }}
          image: "{{ $frontendValues.image.repository }}:{{ $frontendValues.image.tag | default $top.Chart.AppVersion }}"
          imagePullPolicy: {{ $frontendValues.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - name: http
              containerPort: {{ $frontendValues.service.port }}
              protocol: TCP
          # Liveness and Readiness Probes (adjust paths as needed)
          livenessProbe:
            httpGet:
              path: / # Or a specific health check endpoint like /healthz
              port: http
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: / # Or a specific readiness endpoint like /readyz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml $frontendValues.resources | default $top.Values.global.resources | nindent 12 }}
          envFrom:
            - secretRef:
                name: {{ $frontendValues.config.mountAllKeysFromSecret }}
          # env:
          #   - name: DEPLOY_COLOR
          #     value: {{ $color }}
      {{- with $frontendValues.nodeSelector | default $top.Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $frontendValues.affinity | default $top.Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $frontendValues.tolerations | default $top.Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
{{- end }}

