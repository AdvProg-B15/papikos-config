global:
  activeColor: blue
  # Global image settings
  imageRegistry: asia-southeast1-docker.pkg.dev/belajar-kube-457207/papikos-repository
  # Default image pull policy
  imagePullPolicy: Always
ingress:
  annotations: {}
  # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
serviceAccount:
  create: false
  name: "default"
frontend:
  enabled: true
  image:
    repository: asia-southeast1-docker.pkg.dev/belajar-kube-457207/papikos-repository/papikos-fe
    tag: v0.0.1
    imagePullPolicy: Always
  service:
    name: frontend
    port: 3000
  ingress:
    enabled: true
    host: papikos.shop
  metrics:
    path: "/actuator/prometheus"
auth:
  enabled: true
  image:
    repository: asia-southeast1-docker.pkg.dev/belajar-kube-457207/papikos-repository/papikos-auth
    tag: v0.0.4 # This will be automatically updated by CI/CD
    imagePullPolicy: Always
  service:
    name: auth
    port: 8080
  ingress:
    enabled: true
    host: auth.papikos.shop
  metrics:
    path: "/actuator/prometheus"
  rabbitmq:
    enabled: true
    mountAllKeysFromSecret: "amqp-configuration"
  # Database configuration from Kubernetes Secret
  config:
    enabled: true
    secretName: "auth-configuration"
    envMappings:
      - key: DB_HOST
        envName: DB_HOST
      - key: DB_NAME
        envName: DB_NAME
      - key: DB_PORT
        envName: DB_PORT
      - key: DB_USER
        envName: DB_USER
      - key: DB_PASSWORD
        envName: DB_PASSWORD
      - key: JWT_SECRET
        envName: JWT_SECRET
      - key: ADMIN_EMAIL
        envName: ADMIN_EMAIL
      - key: ADMIN_PASSWORD
        envName: ADMIN_PASSWORD
kos:
  enabled: true
  image:
    repository: asia-southeast1-docker.pkg.dev/belajar-kube-457207/papikos-repository/papikos-kos
    tag: v0.0.5 # This will be automatically updated by CI/CD
    imagePullPolicy: Always
  service:
    name: kos
    port: 8080
  ingress:
    enabled: true
    host: kos.papikos.shop
  metrics:
    path: "/actuator/prometheus"
  rabbitmq:
    enabled: true
    mountAllKeysFromSecret: "amqp-configuration"
  config:
    enabled: true
    secretName: "kos-configuration"
    envMappings:
      - key: DB_HOST
        envName: DB_HOST
      - key: DB_NAME
        envName: DB_NAME
      - key: DB_PORT
        envName: DB_PORT
      - key: DB_USER
        envName: DB_USER
      - key: DB_PASSWORD
        envName: DB_PASSWORD
      - key: AUTH_SERVER_URL
        envName: AUTH_SERVER_URL
rental:
  enabled: true
  image:
    repository: asia-southeast1-docker.pkg.dev/belajar-kube-457207/papikos-repository/papikos-rental
    tag: v0.0.5 # This will be automatically updated by CI/CD
    imagePullPolicy: Always
  service:
    name: rental
    port: 8080
  ingress:
    enabled: true
    host: rental.papikos.shop
  metrics:
    path: "/actuator/prometheus"
  rabbitmq:
    enabled: true
    mountAllKeysFromSecret: "amqp-configuration"
  config:
    enabled: true
    secretName: "rental-configuration"
    envMappings:
      - key: DB_HOST
        envName: DB_HOST
      - key: DB_NAME
        envName: DB_NAME
      - key: DB_PORT
        envName: DB_PORT
      - key: DB_USER
        envName: DB_USER
      - key: DB_PASSWORD
        envName: DB_PASSWORD
      - key: AUTH_SERVER_URL
        envName: AUTH_SERVER_URL
        # mountAllKeysFromSecret: "kos-database-credentials"
payment:
  enabled: true
  image:
    repository: asia-southeast1-docker.pkg.dev/belajar-kube-457207/papikos-repository/papikos-payment
    tag: v0.0.1 # This will be automatically updated by CI/CD
    imagePullPolicy: Always
  service:
    name: payment
    port: 8080
  ingress:
    enabled: true
    host: payment.papikos.shop
  metrics:
    path: "/actuator/prometheus"
  rabbitmq:
    enabled: true
    mountAllKeysFromSecret: "amqp-configuration"
  config:
    enabled: true
    secretName: "payment-configuration"
    envMappings:
      - key: DB_HOST
        envName: DB_HOST
      - key: DB_NAME
        envName: DB_NAME
      - key: DB_PORT
        envName: DB_PORT
      - key: DB_USER
        envName: DB_USER
      - key: DB_PASSWORD
        envName: DB_PASSWORD
      - key: AUTH_SERVER_URL
        envName: AUTH_SERVER_URL
        # mountAllKeysFromSecret: "payment-database-credentials"
notification:
  enabled: true
  image:
    repository: asia-southeast1-docker.pkg.dev/belajar-kube-457207/papikos-repository/papikos-notification-wishlist
    tag: v0.0.2 # This will be automatically updated by CI/CD
    imagePullPolicy: Always
  service:
    name: notification
    port: 8080
  ingress:
    enabled: true
    host: notification.papikos.shop
  metrics:
    path: "/actuator/prometheus"
  rabbitmq:
    enabled: true
    mountAllKeysFromSecret: "amqp-configuration"
  config:
    enabled: true
    secretName: "notification-configuration"
    envMappings:
      - key: DB_HOST
        envName: DB_HOST
      - key: DB_NAME
        envName: DB_NAME
      - key: DB_PORT
        envName: DB_PORT
      - key: DB_USER
        envName: DB_USER
      - key: DB_PASSWORD
        envName: DB_PASSWORD
      - key: AUTH_SERVER_URL
        envName: AUTH_SERVER_URL
        # mountAllKeysFromSecret: "notification-database-credentials"
chat:
  enabled: true
  image:
    repository: asia-southeast1-docker.pkg.dev/belajar-kube-457207/papikos-repository/papikos-chat
    tag: v0.0.5 # This will be automatically updated by CI/CD
    imagePullPolicy: Always
  service:
    name: chat
    port: 8080
  ingress:
    enabled: true
    host: chat.papikos.shop
  metrics:
    path: "/actuator/prometheus"
  rabbitmq:
    enabled: true
    mountAllKeysFromSecret: "amqp-configuration"
  config:
    enabled: true
    secretName: "chat-configuration"
    envMappings:
      - key: DB_HOST
        envName: DB_HOST
      - key: DB_NAME
        envName: DB_NAME
      - key: DB_PORT
        envName: DB_PORT
      - key: DB_USER
        envName: DB_USER
      - key: DB_PASSWORD
        envName: DB_PASSWORD
      - key: AUTH_SERVER_URL
        envName: AUTH_SERVER_URL
        # mountAllKeysFromSecret: "notification-database-credentials"
version:
  auth: latest # Current deployed version
  frontend: latest # Current deployed version
  kos: latest # Current deployed version
  rental: latest # Current deployed version
  payment: latest # Current deployed version
  notification: latest # Current deployed version
  chat: latest # Current deployed version
  lastUpdated: "" # Timestamp of last update
  deployedBy: "" # Who triggered the deployment
